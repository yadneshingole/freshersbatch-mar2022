Learning Objectives:-
Perform a rolling update of the container version
Roll back to the previous working state


Problem Statement:-
Your company's developers have just finished developing a new version of their candy-themed mobile game. They are ready to update the backend services that are running in your Kubernetes cluster. There is a deployment in the cluster managing the replicas for this application. The deployment is called candy-deployment. 

candy-deployment.yaml
--------------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: candy-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: candy-ws
  template:
    metadata:
      labels:
        app: candy-ws
    spec:
      containers:
      - image: linuxacademycontent/candy-service:2
        name: candy-ws


You have been asked to update the image for the container named candy-ws in this deployment template to a new version, linuxacademycontent/candy-service:3.

After you have updated the image using a rolling update, check on the status of the update to make sure it is working. If it is not working, perform a rollback to the previous state.

Make sure that the rolling update is in such a way that atleast 25% of pods are up and running during update with Zero downtime.



Steps: Perform a rolling update of the container version

1)Creating the deployment yaml files:
  
candy-deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
            {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"candy-deployment","namespace":"default"},"spec":{"replicas":2,"selector":{"matchLabels":{"app":"candy-ws"}},"template":{"metadata":{"labels":{"app":"candy-ws"}},"spec":{"containers":[{"image":"linuxacademycontent/candy-service:2","name":"candy-ws"}]}}}}
  creationTimestamp: null
  generation: 1
  name: candy-deployment
  selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/candy-deployment
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: candy-ws
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: candy-ws
    spec:
      containers:
      - image: linuxacademycontent/candy-service:2
        imagePullPolicy: IfNotPresent
        name: candy-ws
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

2) Updating to New Image

a) Setting New Image for Deployment
 Command: kubectl set image deployment/candy-deployment candy-ws=linuxacademycontent/candy-service:3 --record

b) Performing Rollout
 Command: kubectl rollout status deployment/candy-deployment

3) Performing RollBack
  Command: kubectl rollout history deployment/candy-deployment

  Command: kubectl rollout undo deployment/candy-deployment






